apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'maven'

buildscript {
    ext {
        gradleVersion = '3.5.0'
        kotlinVersion = '1.4.30'
    }
    repositories {
        google()
        jcenter()
    }

    dependencies {
//        classpath "com.android.tools.build:gradle:$gradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    google()
    mavenLocal()
    mavenCentral()
//    maven {
//        url 'http://maven.wemomo.com:18081/nexus/content/repositories/android_snapshot/'
//        credentials {
//            username NEXUS_USERNAME
//            password NEXUS_PASSWORD
//        }
//    }
}

dependencies {
    implementation "com.android.tools.build:gradle:$gradleVersion"
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:0.15.2'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.11.0.202103091610-r'
    implementation "com.google.code.gson:gson:2.8.2"

    implementation 'org.javassist:javassist:3.26.0-GA'
    implementation 'org.ow2.asm:asm:9.0'
    implementation "com.squareup:javapoet:1.13.0"

}

gradlePlugin {
    plugins {
        liteBuildPlugin {
            id = 'com.immomo.litebuild.plugin'
            implementationClass = 'com.immomo.litebuild.LiteBuildPlugin'
        }
    }
}


def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

// 在项目根路径下执行 ./gradlew -p buildSrc :litebuild-gradle-plugin:uploadArchives
def isUploadMavenCenter = false
if (isUploadMavenCenter) {
    apply from: rootProject.file('publish_to_maven_central.gradle')
} else {
    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {
                    pom.groupId = 'com.immomo.litebuild'
                    pom.artifactId = 'plugin'
                    pom.version = '0.1.52i'
                    repository(url: MOMOAGORA_RELEASE_REPOSITORY_URL) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
//                snapshotRepository(url: MOMOAGORA_SNAPSHOT_REPOSITORY_URL) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
                }
            }
        }
    }
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourceJar
    }
}

def copyLib = false

// 配置生成 jar 包
jar {
    manifest {

        Configuration configuration = project.configurations.compileClasspath
        configuration.resolvedConfiguration.lenientConfiguration.allModuleDependencies.each {
            def identifier = it.module.id
//            println(it.module.toString())
//            println("===> ${identifier.group}:${identifier.name}:${identifier.version}")
        }

        def map = ["kotlin-stdlib":0,
                   "kotlin-stdlib-common":0,
                   "kotlin-csv-jvm":0,
                   "org.eclipse.jgit":0,
                   "slf4j-api":0,
                   "kotlin-logging":0,
                   "com.immomo":0]

        String someString = ''

        if (copyLib) {
            println("copyLib run ===================>>>>>>>>")
            def path = new File(System.getProperties().getProperty("user.home") + '/LiteBuild');
            if (!path.exists()) {
                path.mkdirs();
            }
            configurations.compileClasspath.collect { file ->
                map.each { entry ->
                    if (file.toString().contains(entry.key)) {
                        copy(file.toString(), System.getProperties().getProperty("user.home") + "/LiteBuild/" + entry.key + ".jar")
                        someString = someString + " " + file.toString()
                    }
                }
            }
            copy(System.getProperties().getProperty("user.home") + "/.gradle/caches/modules-2/files-2.1/io.github.microutils/kotlin-logging/1.7.9/910dfb87d91a48f52d3afb4b0b09cff9d2f23f6b/kotlin-logging-1.7.9.jar", System.getProperties().getProperty("user.home") + "/LiteBuild/kotlin-logging-1.7.9.jar")
            //  无法获取 jar 包中的依赖
            someString = someString + " " + System.getProperties().getProperty("user.home") + "/.gradle/caches/modules-2/files-2.1/io.github.microutils/kotlin-logging/1.7.9/910dfb87d91a48f52d3afb4b0b09cff9d2f23f6b/kotlin-logging-1.7.9.jar"
            println(someString)
        }

        attributes 'Main-Class': 'com.immomo.litebuild.JavaEntrance'//,
//                    'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
//                    'Class-Path': '/Users/momo/Desktop/jar_test/kotlin-stdlib-1.4.30.jar /Users/momo/Desktop/jar_test/kotlin-stdlib-common-1.4.30.jar /Users/momo/Desktop/jar_test/kotlin-csv-jvm-0.15.2.jar /Users/momo/Desktop/jar_test/org.eclipse.jgit-5.11.0.202103091610-r.jar /Users/momo/Desktop/jar_test/slf4j-api-1.7.30.jar /Users/momo/Desktop/jar_test/kotlin-logging-1.7.9.jar'
//                    'Class-Path' : someString
//                    'Class-Path' : '../kotlin-stdlib-1.4.30.jar ../kotlin-stdlib-common-1.4.30.jar ../kotlin-csv-jvm-0.15.2.jar ../org.eclipse.jgit-5.11.0.202103091610-r.jar ../slf4j-api-1.7.30.jar ../kotlin-logging-1.7.9.jar'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
//    from { configurations.compile.collect {
//        println("file : " + it.toString())
//        it.isDirectory() ? it : zipTree(it)
//    } }
//        configurations.runtime.each {someString = someString + " lib//"+it.name}
}

def copy(String src, String dest) {
    def f1 = new File(src)
    def f2 = new File(dest)
    if (!f2.exists()) {
        f2.createNewFile()
    }
    f1.withDataInputStream {
        input ->
            f2.withDataOutputStream {
                output -> output << input
            }
    }
    return true
}

