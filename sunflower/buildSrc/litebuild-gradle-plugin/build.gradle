apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'maven'

//apply from: rootProject.file('../publish_to_maven_central.gradle')
buildscript {
    ext {
        gradleVersion = '4.0.2'
        kotlinVersion = '1.4.30'
    }
    repositories {
        google()
        jcenter()
    }

    dependencies {
//        classpath "com.android.tools.build:gradle:$gradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    google()
    mavenLocal()
    mavenCentral()
//    maven {
//        url 'http://maven.wemomo.com:18081/nexus/content/repositories/android_snapshot/'
//        credentials {
//            username NEXUS_USERNAME
//            password NEXUS_PASSWORD
//        }
//    }
}

dependencies {
    implementation "com.android.tools.build:gradle:4.0.2"
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:0.15.2'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.11.0.202103091610-r'
    implementation "com.google.code.gson:gson:2.8.2"

}

gradlePlugin {
    plugins {
        liteBuildPlugin {
            id = 'com.immomo.litebuild.plugin'
            implementationClass = 'com.immomo.litebuild.LiteBuildPlugin'
        }
    }
}


def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}
// 在项目根路径下执行 ./gradlew -p buildSrc :litebuild-gradle-plugin:uploadArchives
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = 'com.immomo.litebuild'
                pom.artifactId = 'plugin'
                pom.version = '0.1.17'
                repository(url: MOMOAGORA_RELEASE_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
//                snapshotRepository(url: MOMOAGORA_SNAPSHOT_REPOSITORY_URL) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
            }
        }
    }
}
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives sourceJar
}
