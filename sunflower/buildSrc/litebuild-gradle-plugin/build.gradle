apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'maven'

buildscript {
    ext {
        gradleVersion = '3.5.0'
        kotlinVersion = '1.4.30'
    }
    repositories {
        google()
        jcenter()
    }

    dependencies {
//        classpath "com.android.tools.build:gradle:$gradleVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

repositories {
    google()
    mavenLocal()
    mavenCentral()
//    maven {
//        url 'http://maven.wemomo.com:18081/nexus/content/repositories/android_snapshot/'
//        credentials {
//            username NEXUS_USERNAME
//            password NEXUS_PASSWORD
//        }
//    }
}

dependencies {
    implementation "com.android.tools.build:gradle:$gradleVersion"
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:0.15.2'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.11.0.202103091610-r'
    implementation "com.google.code.gson:gson:2.8.2"

    implementation 'org.javassist:javassist:3.26.0-GA'
    implementation 'org.ow2.asm:asm:9.0'
    implementation "com.squareup:javapoet:1.13.0"

}

gradlePlugin {
    plugins {
        liteBuildPlugin {
            id = 'com.immomo.litebuild.plugin'
            implementationClass = 'com.immomo.litebuild.LiteBuildPlugin'
        }
    }
}


def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

// 在项目根路径下执行 ./gradlew -p buildSrc :litebuild-gradle-plugin:uploadArchives
def isUploadMavenCenter = false
if (isUploadMavenCenter) {
    apply from: rootProject.file('publish_to_maven_central.gradle')
} else {
    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {
                    pom.groupId = 'com.immomo.litebuild'
                    pom.artifactId = 'plugin'
                    pom.version = '0.1.36'
                    repository(url: MOMOAGORA_RELEASE_REPOSITORY_URL) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
//                snapshotRepository(url: MOMOAGORA_SNAPSHOT_REPOSITORY_URL) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }
                }
            }
        }
    }
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourceJar
    }
}

// 配置生成 jar 包
jar {
    manifest {
        attributes 'Main-Class': 'com.immomo.litebuild.JavaEntrance',
//                    'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
                    'Class-Path': '/Users/momo/Desktop/jar_test/kotlin-stdlib-1.4.30.jar /Users/momo/Desktop/jar_test/kotlin-stdlib-common-1.4.30.jar /Users/momo/Desktop/jar_test/kotlin-csv-jvm-0.15.2.jar /Users/momo/Desktop/jar_test/org.eclipse.jgit-5.11.0.202103091610-r.jar /Users/momo/Desktop/jar_test/slf4j-api-1.7.30.jar /Users/momo/Desktop/jar_test/kotlin-logging-1.7.9.jar'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}
